// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

package calculator;

/**
 * Protobuf type {@code calculator.ComplexArithmeticOpArguments}
 */
public final class ComplexArithmeticOpArguments extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:calculator.ComplexArithmeticOpArguments)
    ComplexArithmeticOpArgumentsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ComplexArithmeticOpArguments.newBuilder() to construct.
  private ComplexArithmeticOpArguments(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ComplexArithmeticOpArguments() {
    type_ = 0;
    numbers_ = emptyDoubleList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ComplexArithmeticOpArguments();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return calculator.CalculatorProto.internal_static_calculator_ComplexArithmeticOpArguments_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return calculator.CalculatorProto.internal_static_calculator_ComplexArithmeticOpArguments_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            calculator.ComplexArithmeticOpArguments.class, calculator.ComplexArithmeticOpArguments.Builder.class);
  }

  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_ = 0;
  /**
   * <code>.calculator.OperationType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <code>.calculator.OperationType type = 1;</code>
   * @return The type.
   */
  @java.lang.Override public calculator.OperationType getType() {
    calculator.OperationType result = calculator.OperationType.forNumber(type_);
    return result == null ? calculator.OperationType.UNRECOGNIZED : result;
  }

  public static final int NUMBERS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList numbers_;
  /**
   * <code>repeated double numbers = 2;</code>
   * @return A list containing the numbers.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getNumbersList() {
    return numbers_;
  }
  /**
   * <code>repeated double numbers = 2;</code>
   * @return The count of numbers.
   */
  public int getNumbersCount() {
    return numbers_.size();
  }
  /**
   * <code>repeated double numbers = 2;</code>
   * @param index The index of the element to return.
   * @return The numbers at the given index.
   */
  public double getNumbers(int index) {
    return numbers_.getDouble(index);
  }
  private int numbersMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (type_ != calculator.OperationType.Sum.getNumber()) {
      output.writeEnum(1, type_);
    }
    if (getNumbersList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(numbersMemoizedSerializedSize);
    }
    for (int i = 0; i < numbers_.size(); i++) {
      output.writeDoubleNoTag(numbers_.getDouble(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (type_ != calculator.OperationType.Sum.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNumbersList().size();
      size += dataSize;
      if (!getNumbersList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      numbersMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof calculator.ComplexArithmeticOpArguments)) {
      return super.equals(obj);
    }
    calculator.ComplexArithmeticOpArguments other = (calculator.ComplexArithmeticOpArguments) obj;

    if (type_ != other.type_) return false;
    if (!getNumbersList()
        .equals(other.getNumbersList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    if (getNumbersCount() > 0) {
      hash = (37 * hash) + NUMBERS_FIELD_NUMBER;
      hash = (53 * hash) + getNumbersList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static calculator.ComplexArithmeticOpArguments parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static calculator.ComplexArithmeticOpArguments parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static calculator.ComplexArithmeticOpArguments parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static calculator.ComplexArithmeticOpArguments parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(calculator.ComplexArithmeticOpArguments prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code calculator.ComplexArithmeticOpArguments}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:calculator.ComplexArithmeticOpArguments)
      calculator.ComplexArithmeticOpArgumentsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return calculator.CalculatorProto.internal_static_calculator_ComplexArithmeticOpArguments_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return calculator.CalculatorProto.internal_static_calculator_ComplexArithmeticOpArguments_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              calculator.ComplexArithmeticOpArguments.class, calculator.ComplexArithmeticOpArguments.Builder.class);
    }

    // Construct using calculator.ComplexArithmeticOpArguments.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      type_ = 0;
      numbers_ = emptyDoubleList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return calculator.CalculatorProto.internal_static_calculator_ComplexArithmeticOpArguments_descriptor;
    }

    @java.lang.Override
    public calculator.ComplexArithmeticOpArguments getDefaultInstanceForType() {
      return calculator.ComplexArithmeticOpArguments.getDefaultInstance();
    }

    @java.lang.Override
    public calculator.ComplexArithmeticOpArguments build() {
      calculator.ComplexArithmeticOpArguments result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public calculator.ComplexArithmeticOpArguments buildPartial() {
      calculator.ComplexArithmeticOpArguments result = new calculator.ComplexArithmeticOpArguments(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(calculator.ComplexArithmeticOpArguments result) {
      if (((bitField0_ & 0x00000002) != 0)) {
        numbers_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.numbers_ = numbers_;
    }

    private void buildPartial0(calculator.ComplexArithmeticOpArguments result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.type_ = type_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof calculator.ComplexArithmeticOpArguments) {
        return mergeFrom((calculator.ComplexArithmeticOpArguments)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(calculator.ComplexArithmeticOpArguments other) {
      if (other == calculator.ComplexArithmeticOpArguments.getDefaultInstance()) return this;
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (!other.numbers_.isEmpty()) {
        if (numbers_.isEmpty()) {
          numbers_ = other.numbers_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureNumbersIsMutable();
          numbers_.addAll(other.numbers_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              type_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 17: {
              double v = input.readDouble();
              ensureNumbersIsMutable();
              numbers_.addDouble(v);
              break;
            } // case 17
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureNumbersIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                numbers_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <code>.calculator.OperationType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.calculator.OperationType type = 1;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.calculator.OperationType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public calculator.OperationType getType() {
      calculator.OperationType result = calculator.OperationType.forNumber(type_);
      return result == null ? calculator.OperationType.UNRECOGNIZED : result;
    }
    /**
     * <code>.calculator.OperationType type = 1;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(calculator.OperationType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.calculator.OperationType type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList numbers_ = emptyDoubleList();
    private void ensureNumbersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        numbers_ = mutableCopy(numbers_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @return A list containing the numbers.
     */
    public java.util.List<java.lang.Double>
        getNumbersList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(numbers_) : numbers_;
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @return The count of numbers.
     */
    public int getNumbersCount() {
      return numbers_.size();
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @param index The index of the element to return.
     * @return The numbers at the given index.
     */
    public double getNumbers(int index) {
      return numbers_.getDouble(index);
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @param index The index to set the value at.
     * @param value The numbers to set.
     * @return This builder for chaining.
     */
    public Builder setNumbers(
        int index, double value) {

      ensureNumbersIsMutable();
      numbers_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @param value The numbers to add.
     * @return This builder for chaining.
     */
    public Builder addNumbers(double value) {

      ensureNumbersIsMutable();
      numbers_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @param values The numbers to add.
     * @return This builder for chaining.
     */
    public Builder addAllNumbers(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNumbersIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, numbers_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double numbers = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumbers() {
      numbers_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:calculator.ComplexArithmeticOpArguments)
  }

  // @@protoc_insertion_point(class_scope:calculator.ComplexArithmeticOpArguments)
  private static final calculator.ComplexArithmeticOpArguments DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new calculator.ComplexArithmeticOpArguments();
  }

  public static calculator.ComplexArithmeticOpArguments getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ComplexArithmeticOpArguments>
      PARSER = new com.google.protobuf.AbstractParser<ComplexArithmeticOpArguments>() {
    @java.lang.Override
    public ComplexArithmeticOpArguments parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ComplexArithmeticOpArguments> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ComplexArithmeticOpArguments> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public calculator.ComplexArithmeticOpArguments getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

