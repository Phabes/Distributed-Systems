# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'WorkingState' not in _M_SmartHome.__dict__:
    _M_SmartHome.WorkingState = Ice.createTempClass()
    class WorkingState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    WorkingState.Off = WorkingState("Off", 0)
    WorkingState.On = WorkingState("On", 1)
    WorkingState.Broken = WorkingState("Broken", 2)
    WorkingState._enumerators = { 0:WorkingState.Off, 1:WorkingState.On, 2:WorkingState.Broken }

    _M_SmartHome._t_WorkingState = IcePy.defineEnum('::SmartHome::WorkingState', WorkingState, (), WorkingState._enumerators)

    _M_SmartHome.WorkingState = WorkingState
    del WorkingState

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_SmartHome.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_SmartHome.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_SmartHome.Device._op_getName.end(self, _r)

        def getWorkingState(self, context=None):
            return _M_SmartHome.Device._op_getWorkingState.invoke(self, ((), context))

        def getWorkingStateAsync(self, context=None):
            return _M_SmartHome.Device._op_getWorkingState.invokeAsync(self, ((), context))

        def begin_getWorkingState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getWorkingState.begin(self, ((), _response, _ex, _sent, context))

        def end_getWorkingState(self, _r):
            return _M_SmartHome.Device._op_getWorkingState.end(self, _r)

        def toogleWorkingState(self, context=None):
            return _M_SmartHome.Device._op_toogleWorkingState.invoke(self, ((), context))

        def toogleWorkingStateAsync(self, context=None):
            return _M_SmartHome.Device._op_toogleWorkingState.invokeAsync(self, ((), context))

        def begin_toogleWorkingState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_toogleWorkingState.begin(self, ((), _response, _ex, _sent, context))

        def end_toogleWorkingState(self, _r):
            return _M_SmartHome.Device._op_toogleWorkingState.end(self, _r)

        def setWorkingState(self, workingState, context=None):
            return _M_SmartHome.Device._op_setWorkingState.invoke(self, ((workingState, ), context))

        def setWorkingStateAsync(self, workingState, context=None):
            return _M_SmartHome.Device._op_setWorkingState.invokeAsync(self, ((workingState, ), context))

        def begin_setWorkingState(self, workingState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_setWorkingState.begin(self, ((workingState, ), _response, _ex, _sent, context))

        def end_setWorkingState(self, _r):
            return _M_SmartHome.Device._op_setWorkingState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def getWorkingState(self, current=None):
            raise NotImplementedError("servant method 'getWorkingState' not implemented")

        def toogleWorkingState(self, current=None):
            raise NotImplementedError("servant method 'toogleWorkingState' not implemented")

        def setWorkingState(self, workingState, current=None):
            raise NotImplementedError("servant method 'setWorkingState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_getWorkingState = IcePy.Operation('getWorkingState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_WorkingState, False, 0), ())
    Device._op_toogleWorkingState = IcePy.Operation('toogleWorkingState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Device._op_setWorkingState = IcePy.Operation('setWorkingState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_WorkingState, False, 0),), (), None, ())

    _M_SmartHome.Device = Device
    del Device

_M_SmartHome._t_Sensor = IcePy.defineValue('::SmartHome::Sensor', Ice.Value, -1, (), False, True, None, ())

if 'SensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SensorPrx = Ice.createTempClass()
    class SensorPrx(_M_SmartHome.DevicePrx):

        def getChargeState(self, context=None):
            return _M_SmartHome.Sensor._op_getChargeState.invoke(self, ((), context))

        def getChargeStateAsync(self, context=None):
            return _M_SmartHome.Sensor._op_getChargeState.invokeAsync(self, ((), context))

        def begin_getChargeState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sensor._op_getChargeState.begin(self, ((), _response, _ex, _sent, context))

        def end_getChargeState(self, _r):
            return _M_SmartHome.Sensor._op_getChargeState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SensorPrx.ice_checkedCast(proxy, '::SmartHome::Sensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sensor'
    _M_SmartHome._t_SensorPrx = IcePy.defineProxy('::SmartHome::Sensor', SensorPrx)

    _M_SmartHome.SensorPrx = SensorPrx
    del SensorPrx

    _M_SmartHome.Sensor = Ice.createTempClass()
    class Sensor(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Sensor')

        def ice_id(self, current=None):
            return '::SmartHome::Sensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sensor'

        def getChargeState(self, current=None):
            raise NotImplementedError("servant method 'getChargeState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_SensorDisp = IcePy.defineClass('::SmartHome::Sensor', Sensor, (), None, (_M_SmartHome._t_DeviceDisp,))
    Sensor._ice_type = _M_SmartHome._t_SensorDisp

    Sensor._op_getChargeState = IcePy.Operation('getChargeState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_SmartHome.Sensor = Sensor
    del Sensor

if 'DataRetrievingError' not in _M_SmartHome.__dict__:
    _M_SmartHome.DataRetrievingError = Ice.createTempClass()
    class DataRetrievingError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DataRetrievingError'

    _M_SmartHome._t_DataRetrievingError = IcePy.defineException('::SmartHome::DataRetrievingError', DataRetrievingError, (), False, None, ())
    DataRetrievingError._ice_type = _M_SmartHome._t_DataRetrievingError

    _M_SmartHome.DataRetrievingError = DataRetrievingError
    del DataRetrievingError

_M_SmartHome._t_TemperatureSensor = IcePy.defineValue('::SmartHome::TemperatureSensor', Ice.Value, -1, (), False, True, None, ())

if 'TemperatureSensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureSensorPrx = Ice.createTempClass()
    class TemperatureSensorPrx(_M_SmartHome.SensorPrx):

        def getTemperature(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.TemperatureSensor._op_getTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_checkedCast(proxy, '::SmartHome::TemperatureSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'
    _M_SmartHome._t_TemperatureSensorPrx = IcePy.defineProxy('::SmartHome::TemperatureSensor', TemperatureSensorPrx)

    _M_SmartHome.TemperatureSensorPrx = TemperatureSensorPrx
    del TemperatureSensorPrx

    _M_SmartHome.TemperatureSensor = Ice.createTempClass()
    class TemperatureSensor(_M_SmartHome.Sensor):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Sensor', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::TemperatureSensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureSensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureSensorDisp = IcePy.defineClass('::SmartHome::TemperatureSensor', TemperatureSensor, (), None, (_M_SmartHome._t_SensorDisp,))
    TemperatureSensor._ice_type = _M_SmartHome._t_TemperatureSensorDisp

    TemperatureSensor._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), (_M_SmartHome._t_DataRetrievingError,))

    _M_SmartHome.TemperatureSensor = TemperatureSensor
    del TemperatureSensor

_M_SmartHome._t_HumiditySensor = IcePy.defineValue('::SmartHome::HumiditySensor', Ice.Value, -1, (), False, True, None, ())

if 'HumiditySensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.HumiditySensorPrx = Ice.createTempClass()
    class HumiditySensorPrx(_M_SmartHome.SensorPrx):

        def getHumidity(self, context=None):
            return _M_SmartHome.HumiditySensor._op_getHumidity.invoke(self, ((), context))

        def getHumidityAsync(self, context=None):
            return _M_SmartHome.HumiditySensor._op_getHumidity.invokeAsync(self, ((), context))

        def begin_getHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.HumiditySensor._op_getHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_getHumidity(self, _r):
            return _M_SmartHome.HumiditySensor._op_getHumidity.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.HumiditySensorPrx.ice_checkedCast(proxy, '::SmartHome::HumiditySensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.HumiditySensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HumiditySensor'
    _M_SmartHome._t_HumiditySensorPrx = IcePy.defineProxy('::SmartHome::HumiditySensor', HumiditySensorPrx)

    _M_SmartHome.HumiditySensorPrx = HumiditySensorPrx
    del HumiditySensorPrx

    _M_SmartHome.HumiditySensor = Ice.createTempClass()
    class HumiditySensor(_M_SmartHome.Sensor):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::HumiditySensor', '::SmartHome::Sensor')

        def ice_id(self, current=None):
            return '::SmartHome::HumiditySensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::HumiditySensor'

        def getHumidity(self, current=None):
            raise NotImplementedError("servant method 'getHumidity' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_HumiditySensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_HumiditySensorDisp = IcePy.defineClass('::SmartHome::HumiditySensor', HumiditySensor, (), None, (_M_SmartHome._t_SensorDisp,))
    HumiditySensor._ice_type = _M_SmartHome._t_HumiditySensorDisp

    HumiditySensor._op_getHumidity = IcePy.Operation('getHumidity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_DataRetrievingError,))

    _M_SmartHome.HumiditySensor = HumiditySensor
    del HumiditySensor

if 'Intensity' not in _M_SmartHome.__dict__:
    _M_SmartHome.Intensity = Ice.createTempClass()
    class Intensity(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Intensity.Low = Intensity("Low", 0)
    Intensity.Medium = Intensity("Medium", 1)
    Intensity.High = Intensity("High", 2)
    Intensity._enumerators = { 0:Intensity.Low, 1:Intensity.Medium, 2:Intensity.High }

    _M_SmartHome._t_Intensity = IcePy.defineEnum('::SmartHome::Intensity', Intensity, (), Intensity._enumerators)

    _M_SmartHome.Intensity = Intensity
    del Intensity

if 'SprinklerSettings' not in _M_SmartHome.__dict__:
    _M_SmartHome.SprinklerSettings = Ice.createTempClass()
    class SprinklerSettings(object):
        def __init__(self, intensity=_M_SmartHome.Intensity.Low, bespatteringTime=0.0):
            self.intensity = intensity
            self.bespatteringTime = bespatteringTime

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.SprinklerSettings):
                return NotImplemented
            else:
                if self.intensity != other.intensity:
                    return False
                if self.bespatteringTime != other.bespatteringTime:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SprinklerSettings)

        __repr__ = __str__

    _M_SmartHome._t_SprinklerSettings = IcePy.defineStruct('::SmartHome::SprinklerSettings', SprinklerSettings, (), (
        ('intensity', (), _M_SmartHome._t_Intensity),
        ('bespatteringTime', (), IcePy._t_double)
    ))

    _M_SmartHome.SprinklerSettings = SprinklerSettings
    del SprinklerSettings

if 'BespatteringTimeError' not in _M_SmartHome.__dict__:
    _M_SmartHome.BespatteringTimeError = Ice.createTempClass()
    class BespatteringTimeError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::BespatteringTimeError'

    _M_SmartHome._t_BespatteringTimeError = IcePy.defineException('::SmartHome::BespatteringTimeError', BespatteringTimeError, (), False, None, ())
    BespatteringTimeError._ice_type = _M_SmartHome._t_BespatteringTimeError

    _M_SmartHome.BespatteringTimeError = BespatteringTimeError
    del BespatteringTimeError

if 'IntesityError' not in _M_SmartHome.__dict__:
    _M_SmartHome.IntesityError = Ice.createTempClass()
    class IntesityError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::IntesityError'

    _M_SmartHome._t_IntesityError = IcePy.defineException('::SmartHome::IntesityError', IntesityError, (), False, None, ())
    IntesityError._ice_type = _M_SmartHome._t_IntesityError

    _M_SmartHome.IntesityError = IntesityError
    del IntesityError

_M_SmartHome._t_Sprinkler = IcePy.defineValue('::SmartHome::Sprinkler', Ice.Value, -1, (), False, True, None, ())

if 'SprinklerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SprinklerPrx = Ice.createTempClass()
    class SprinklerPrx(_M_SmartHome.DevicePrx):

        def getIntensity(self, context=None):
            return _M_SmartHome.Sprinkler._op_getIntensity.invoke(self, ((), context))

        def getIntensityAsync(self, context=None):
            return _M_SmartHome.Sprinkler._op_getIntensity.invokeAsync(self, ((), context))

        def begin_getIntensity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sprinkler._op_getIntensity.begin(self, ((), _response, _ex, _sent, context))

        def end_getIntensity(self, _r):
            return _M_SmartHome.Sprinkler._op_getIntensity.end(self, _r)

        def getBespatteringTime(self, context=None):
            return _M_SmartHome.Sprinkler._op_getBespatteringTime.invoke(self, ((), context))

        def getBespatteringTimeAsync(self, context=None):
            return _M_SmartHome.Sprinkler._op_getBespatteringTime.invokeAsync(self, ((), context))

        def begin_getBespatteringTime(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sprinkler._op_getBespatteringTime.begin(self, ((), _response, _ex, _sent, context))

        def end_getBespatteringTime(self, _r):
            return _M_SmartHome.Sprinkler._op_getBespatteringTime.end(self, _r)

        def getSettings(self, context=None):
            return _M_SmartHome.Sprinkler._op_getSettings.invoke(self, ((), context))

        def getSettingsAsync(self, context=None):
            return _M_SmartHome.Sprinkler._op_getSettings.invokeAsync(self, ((), context))

        def begin_getSettings(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sprinkler._op_getSettings.begin(self, ((), _response, _ex, _sent, context))

        def end_getSettings(self, _r):
            return _M_SmartHome.Sprinkler._op_getSettings.end(self, _r)

        def setSettingsAndWorkingState(self, sprinklerSettings, workingState, context=None):
            return _M_SmartHome.Sprinkler._op_setSettingsAndWorkingState.invoke(self, ((sprinklerSettings, workingState), context))

        def setSettingsAndWorkingStateAsync(self, sprinklerSettings, workingState, context=None):
            return _M_SmartHome.Sprinkler._op_setSettingsAndWorkingState.invokeAsync(self, ((sprinklerSettings, workingState), context))

        def begin_setSettingsAndWorkingState(self, sprinklerSettings, workingState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sprinkler._op_setSettingsAndWorkingState.begin(self, ((sprinklerSettings, workingState), _response, _ex, _sent, context))

        def end_setSettingsAndWorkingState(self, _r):
            return _M_SmartHome.Sprinkler._op_setSettingsAndWorkingState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SprinklerPrx.ice_checkedCast(proxy, '::SmartHome::Sprinkler', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SprinklerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sprinkler'
    _M_SmartHome._t_SprinklerPrx = IcePy.defineProxy('::SmartHome::Sprinkler', SprinklerPrx)

    _M_SmartHome.SprinklerPrx = SprinklerPrx
    del SprinklerPrx

    _M_SmartHome.Sprinkler = Ice.createTempClass()
    class Sprinkler(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Sprinkler')

        def ice_id(self, current=None):
            return '::SmartHome::Sprinkler'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sprinkler'

        def getIntensity(self, current=None):
            raise NotImplementedError("servant method 'getIntensity' not implemented")

        def getBespatteringTime(self, current=None):
            raise NotImplementedError("servant method 'getBespatteringTime' not implemented")

        def getSettings(self, current=None):
            raise NotImplementedError("servant method 'getSettings' not implemented")

        def setSettingsAndWorkingState(self, sprinklerSettings, workingState, current=None):
            raise NotImplementedError("servant method 'setSettingsAndWorkingState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SprinklerDisp)

        __repr__ = __str__

    _M_SmartHome._t_SprinklerDisp = IcePy.defineClass('::SmartHome::Sprinkler', Sprinkler, (), None, (_M_SmartHome._t_DeviceDisp,))
    Sprinkler._ice_type = _M_SmartHome._t_SprinklerDisp

    Sprinkler._op_getIntensity = IcePy.Operation('getIntensity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Intensity, False, 0), ())
    Sprinkler._op_getBespatteringTime = IcePy.Operation('getBespatteringTime', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    Sprinkler._op_getSettings = IcePy.Operation('getSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_SprinklerSettings, False, 0), ())
    Sprinkler._op_setSettingsAndWorkingState = IcePy.Operation('setSettingsAndWorkingState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_SprinklerSettings, False, 0), ((), _M_SmartHome._t_WorkingState, False, 0)), (), None, (_M_SmartHome._t_BespatteringTimeError, _M_SmartHome._t_IntesityError))

    _M_SmartHome.Sprinkler = Sprinkler
    del Sprinkler

_M_SmartHome._t_Light = IcePy.defineValue('::SmartHome::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightPrx = Ice.createTempClass()
    class LightPrx(_M_SmartHome.DevicePrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LightPrx.ice_checkedCast(proxy, '::SmartHome::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Light'
    _M_SmartHome._t_LightPrx = IcePy.defineProxy('::SmartHome::Light', LightPrx)

    _M_SmartHome.LightPrx = LightPrx
    del LightPrx

    _M_SmartHome.Light = Ice.createTempClass()
    class Light(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Light')

        def ice_id(self, current=None):
            return '::SmartHome::Light'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Light'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightDisp)

        __repr__ = __str__

    _M_SmartHome._t_LightDisp = IcePy.defineClass('::SmartHome::Light', Light, (), None, (_M_SmartHome._t_DeviceDisp,))
    Light._ice_type = _M_SmartHome._t_LightDisp

    _M_SmartHome.Light = Light
    del Light

if '_t_Devices' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Devices = IcePy.defineSequence('::SmartHome::Devices', (), IcePy._t_string)

_M_SmartHome._t_ConnectedDevices = IcePy.defineValue('::SmartHome::ConnectedDevices', Ice.Value, -1, (), False, True, None, ())

if 'ConnectedDevicesPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ConnectedDevicesPrx = Ice.createTempClass()
    class ConnectedDevicesPrx(Ice.ObjectPrx):

        def getConnectedDevices(self, context=None):
            return _M_SmartHome.ConnectedDevices._op_getConnectedDevices.invoke(self, ((), context))

        def getConnectedDevicesAsync(self, context=None):
            return _M_SmartHome.ConnectedDevices._op_getConnectedDevices.invokeAsync(self, ((), context))

        def begin_getConnectedDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ConnectedDevices._op_getConnectedDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getConnectedDevices(self, _r):
            return _M_SmartHome.ConnectedDevices._op_getConnectedDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ConnectedDevicesPrx.ice_checkedCast(proxy, '::SmartHome::ConnectedDevices', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ConnectedDevicesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ConnectedDevices'
    _M_SmartHome._t_ConnectedDevicesPrx = IcePy.defineProxy('::SmartHome::ConnectedDevices', ConnectedDevicesPrx)

    _M_SmartHome.ConnectedDevicesPrx = ConnectedDevicesPrx
    del ConnectedDevicesPrx

    _M_SmartHome.ConnectedDevices = Ice.createTempClass()
    class ConnectedDevices(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ConnectedDevices')

        def ice_id(self, current=None):
            return '::SmartHome::ConnectedDevices'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ConnectedDevices'

        def getConnectedDevices(self, current=None):
            raise NotImplementedError("servant method 'getConnectedDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ConnectedDevicesDisp)

        __repr__ = __str__

    _M_SmartHome._t_ConnectedDevicesDisp = IcePy.defineClass('::SmartHome::ConnectedDevices', ConnectedDevices, (), None, ())
    ConnectedDevices._ice_type = _M_SmartHome._t_ConnectedDevicesDisp

    ConnectedDevices._op_getConnectedDevices = IcePy.Operation('getConnectedDevices', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Devices, False, 0), ())

    _M_SmartHome.ConnectedDevices = ConnectedDevices
    del ConnectedDevices

# End of module SmartHome
